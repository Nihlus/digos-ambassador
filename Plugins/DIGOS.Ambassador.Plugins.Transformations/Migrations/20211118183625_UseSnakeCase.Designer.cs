// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective

// <auto-generated />
using System;
using DIGOS.Ambassador.Plugins.Transformations.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
#nullable disable
namespace DIGOS.Ambassador.Plugins.Transformations.Migrations
{
    [DbContext(typeof(TransformationsDatabaseContext))]
    [Migration("20211118183625_UseSnakeCase")]
    partial class UseSnakeCase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TransformationModule")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.Character", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");
                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");
                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");
                    b.Property<long>("OwnerID")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");
                    b.Property<string>("PronounProviderFamily")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pronoun_provider_family");
                    b.Property<long?>("RoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");
                    b.HasKey("ID")
                        .HasName("pk_characters");
                    b.HasIndex("OwnerID")
                        .HasDatabaseName("ix_characters_owner_id");
                    b.HasIndex("RoleID")
                        .HasDatabaseName("ix_characters_role_id");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_characters_server_id");
                    b.ToTable("Characters", "CharacterModule", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.CharacterRole", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<int>("Access")
                        .HasColumnType("integer")
                        .HasColumnName("access");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.HasKey("ID")
                        .HasName("pk_character_roles");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_character_roles_server_id");
                    b.ToTable("CharacterRoles", "CharacterModule", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.Data.Image", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("caption");
                    b.Property<long?>("CharacterID")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");
                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");
                    b.HasKey("ID")
                        .HasName("pk_images");
                    b.HasIndex("CharacterID")
                        .HasDatabaseName("ix_images_character_id");
                    b.ToTable("Images", "CharacterModule", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");
                    b.Property<bool>("SendJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("send_join_message");
                    b.Property<bool>("SuppressPermissionWarnings")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_permission_warnings");
                    b.HasKey("ID")
                        .HasName("pk_servers");
                    b.ToTable("Servers", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_server_user");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_server_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_user_id");
                    b.ToTable("ServerUser", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");
                    b.HasKey("ID")
                        .HasName("pk_users");
                    b.ToTable("Users", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Appearance", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("CharacterID")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");
                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");
                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");
                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");
                    b.Property<double>("Muscularity")
                        .HasColumnType("double precision")
                        .HasColumnName("muscularity");
                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");
                    b.HasKey("ID")
                        .HasName("pk_appearances");
                    b.HasIndex("CharacterID")
                        .HasDatabaseName("ix_appearances_character_id");
                    b.ToTable("Appearances", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.GlobalUserProtection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<bool>("DefaultOptIn")
                        .HasColumnType("boolean")
                        .HasColumnName("default_opt_in");
                    b.Property<int>("DefaultType")
                        .HasColumnType("integer")
                        .HasColumnName("default_type");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_global_user_protections");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_global_user_protections_user_id");
                    b.ToTable("GlobalUserProtections", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.ServerUserProtection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<bool>("HasOptedIn")
                        .HasColumnType("boolean")
                        .HasColumnName("has_opted_in");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_server_user_protections");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_protections_server_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_protections_user_id");
                    b.ToTable("ServerUserProtections", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Species", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");
                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");
                    b.HasKey("ID")
                        .HasName("pk_species");
                    b.HasIndex("ParentID")
                        .HasDatabaseName("ix_species_parent_id");
                    b.ToTable("Species", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Transformation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<int?>("DefaultPattern")
                        .HasColumnType("integer")
                        .HasColumnName("default_pattern");
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<string>("GrowMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("grow_message");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<int>("Part")
                        .HasColumnType("integer")
                        .HasColumnName("part");
                    b.Property<string>("ShiftMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_message");
                    b.Property<string>("SingleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("single_description");
                    b.Property<long>("SpeciesID")
                        .HasColumnType("bigint")
                        .HasColumnName("species_id");
                    b.Property<string>("UniformDescription")
                        .HasColumnType("text")
                        .HasColumnName("uniform_description");
                    b.Property<string>("UniformGrowMessage")
                        .HasColumnType("text")
                        .HasColumnName("uniform_grow_message");
                    b.Property<string>("UniformShiftMessage")
                        .HasColumnType("text")
                        .HasColumnName("uniform_shift_message");
                    b.HasKey("ID")
                        .HasName("pk_transformations");
                    b.HasIndex("SpeciesID")
                        .HasDatabaseName("ix_transformations_species_id");
                    b.ToTable("Transformations", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.UserProtectionEntry", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("GlobalProtectionID")
                        .HasColumnType("bigint")
                        .HasColumnName("global_protection_id");
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_user_protection_entries");
                    b.HasIndex("GlobalProtectionID")
                        .HasDatabaseName("ix_user_protection_entries_global_protection_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_protection_entries_user_id");
                    b.ToTable("UserProtectionEntries", "TransformationModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.Character", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_users_owner_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Characters.Model.CharacterRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .HasConstraintName("fk_characters_character_roles_role_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_servers_server_id");
                    b.Navigation("Owner");
                    b.Navigation("Role");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.CharacterRole", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_roles_servers_server_id");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.Data.Image", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Characters.Model.Character", null)
                        .WithMany("Images")
                        .HasForeignKey("CharacterID")
                        .HasConstraintName("fk_images_characters_character_id");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_users_user_id");
                    b.Navigation("Server");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Appearance", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Characters.Model.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appearances_characters_character_id");
                    b.OwnsMany("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.AppearanceComponent", "Components", b1 =>
                        {
                            b1.Property<long>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");
                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("ID"));
                            b1.Property<long>("AppearanceID")
                                .HasColumnType("bigint")
                                .HasColumnName("appearance_id");
                            b1.Property<int>("Chirality")
                                .HasColumnType("integer")
                                .HasColumnName("chirality");
                            b1.Property<int?>("Pattern")
                                .HasColumnType("integer")
                                .HasColumnName("pattern");
                            b1.Property<long>("TransformationID")
                                .HasColumnType("bigint")
                                .HasColumnName("transformation_id");
                            b1.HasKey("ID");
                            b1.HasIndex("AppearanceID")
                                .HasDatabaseName("ix_appearance_components_appearance_id");
                            b1.HasIndex("TransformationID")
                                .HasDatabaseName("ix_appearance_components_transformation_id");
                            b1.ToTable("AppearanceComponents", "TransformationModule");
                            b1.WithOwner()
                                .HasForeignKey("AppearanceID")
                                .HasConstraintName("fk_appearance_components_appearances_appearance_id");
                            b1.HasOne("DIGOS.Ambassador.Plugins.Transformations.Model.Transformation", "Transformation")
                                .WithMany()
                                .HasForeignKey("TransformationID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_appearance_components_transformations_transformation_id");
                            b1.OwnsOne("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Colour", "BaseColour", b2 =>
                                {
                                    b2.Property<long>("AppearanceComponentID")
                                        .HasColumnType("bigint")
                                        .HasColumnName("appearance_component_id");
                                    b2.Property<int?>("Modifier")
                                        .HasColumnType("integer")
                                        .HasColumnName("modifier");
                                    b2.Property<int>("Shade")
                                        .HasColumnType("integer")
                                        .HasColumnName("shade");
                                    b2.HasKey("AppearanceComponentID");
                                    b2.ToTable("BaseColours", "TransformationModule");
                                    b2.WithOwner()
                                        .HasForeignKey("AppearanceComponentID")
                                        .HasConstraintName("fk_base_colours_appearance_components_appearance_id_id");
                                });
                            b1.OwnsOne("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Colour", "PatternColour", b2 =>
                                {
                                    b2.Property<long>("AppearanceComponentID")
                                        .HasColumnType("bigint")
                                        .HasColumnName("appearance_component_id");
                                    b2.Property<int?>("Modifier")
                                        .HasColumnType("integer")
                                        .HasColumnName("modifier");
                                    b2.Property<int>("Shade")
                                        .HasColumnType("integer")
                                        .HasColumnName("shade");
                                    b2.HasKey("AppearanceComponentID");
                                    b2.ToTable("PatternColours", "TransformationModule");
                                    b2.WithOwner()
                                        .HasForeignKey("AppearanceComponentID")
                                        .HasConstraintName("fk_pattern_colours_appearance_components_appearance_id_id");
                                });
                            b1.Navigation("BaseColour")
                                .IsRequired();
                            b1.Navigation("PatternColour");
                            b1.Navigation("Transformation");
                        });
                    b.Navigation("Character");
                    b.Navigation("Components");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.GlobalUserProtection", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_global_user_protections_users_user_id");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.ServerUserProtection", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_protections_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_protections_users_user_id");
                    b.Navigation("Server");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Species", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Transformations.Model.Species", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .HasConstraintName("fk_species_species_parent_id");
                    b.Navigation("Parent");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.Transformation", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Transformations.Model.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transformations_species_species_id");
                    b.OwnsOne("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Colour", "DefaultBaseColour", b1 =>
                        {
                            b1.Property<long>("TransformationID")
                                .HasColumnType("bigint")
                                .HasColumnName("id");
                            b1.Property<int?>("Modifier")
                                .HasColumnType("integer")
                                .HasColumnName("modifier");
                            b1.Property<int>("Shade")
                                .HasColumnType("integer")
                                .HasColumnName("shade");
                            b1.HasKey("TransformationID")
                                .HasName("pk_default_base_colours");
                            b1.ToTable("DefaultBaseColours", "TransformationModule");
                            b1.WithOwner()
                                .HasForeignKey("TransformationID")
                                .HasConstraintName("fk_default_base_colours_transformations_id");
                        });
                    b.OwnsOne("DIGOS.Ambassador.Plugins.Transformations.Model.Appearances.Colour", "DefaultPatternColour", b1 =>
                        {
                            b1.Property<long>("TransformationID")
                                .HasColumnType("bigint")
                                .HasColumnName("id");
                            b1.Property<int?>("Modifier")
                                .HasColumnType("integer")
                                .HasColumnName("modifier");
                            b1.Property<int>("Shade")
                                .HasColumnType("integer")
                                .HasColumnName("shade");
                            b1.HasKey("TransformationID")
                                .HasName("pk_default_pattern_colours");
                            b1.ToTable("DefaultPatternColours", "TransformationModule");
                            b1.WithOwner()
                                .HasForeignKey("TransformationID")
                                .HasConstraintName("fk_default_pattern_colours_transformations_id");
                        });
                    b.Navigation("DefaultBaseColour")
                        .IsRequired();
                    b.Navigation("DefaultPatternColour");
                    b.Navigation("Species");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.UserProtectionEntry", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Transformations.Model.GlobalUserProtection", "GlobalProtection")
                        .WithMany("UserListing")
                        .HasForeignKey("GlobalProtectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_protection_entries_global_user_protections_global_protectio");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_protection_entries_users_user_id");
                    b.Navigation("GlobalProtection");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Characters.Model.Character", b =>
                {
                    b.Navigation("Images");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Navigation("KnownUsers");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Transformations.Model.GlobalUserProtection", b =>
                {
                    b.Navigation("UserListing");
                });
#pragma warning restore 612, 618
        }
    }
}
