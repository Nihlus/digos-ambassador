// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective

// <auto-generated />
using System;
using DIGOS.Ambassador.Plugins.Roleplaying.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
#nullable disable
namespace DIGOS.Ambassador.Plugins.Roleplaying.Migrations
{
    [DbContext(typeof(RoleplayingDatabaseContext))]
    [Migration("20211118183613_UseSnakeCase")]
    partial class UseSnakeCase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RoleplayModule")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");
                    b.Property<bool>("SendJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("send_join_message");
                    b.Property<bool>("SuppressPermissionWarnings")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_permission_warnings");
                    b.HasKey("ID")
                        .HasName("pk_servers");
                    b.ToTable("Servers", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_server_user");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_server_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_user_id");
                    b.ToTable("ServerUser", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");
                    b.HasKey("ID")
                        .HasName("pk_users");
                    b.ToTable("Users", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.Roleplay", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long?>("ActiveChannelID")
                        .HasColumnType("bigint")
                        .HasColumnName("active_channel_id");
                    b.Property<long?>("DedicatedChannelID")
                        .HasColumnType("bigint")
                        .HasColumnName("dedicated_channel_id");
                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");
                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");
                    b.Property<long>("OwnerID")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");
                    b.HasKey("ID")
                        .HasName("pk_roleplays");
                    b.HasIndex("OwnerID")
                        .HasDatabaseName("ix_roleplays_owner_id");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_roleplays_server_id");
                    b.ToTable("Roleplays", "RoleplayModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.RoleplayParticipant", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("RoleplayID")
                        .HasColumnType("bigint")
                        .HasColumnName("roleplay_id");
                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_roleplay_participants");
                    b.HasIndex("RoleplayID")
                        .HasDatabaseName("ix_roleplay_participants_roleplay_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_roleplay_participants_user_id");
                    b.ToTable("RoleplayParticipants", "RoleplayModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.ServerRoleplaySettings", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long?>("ArchiveChannel")
                        .HasColumnType("bigint")
                        .HasColumnName("archive_channel");
                    b.Property<long?>("DedicatedRoleplayChannelsCategory")
                        .HasColumnType("bigint")
                        .HasColumnName("dedicated_roleplay_channels_category");
                    b.Property<long?>("DefaultUserRole")
                        .HasColumnType("bigint")
                        .HasColumnName("default_user_role");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.HasKey("ID")
                        .HasName("pk_server_settings");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_settings_server_id");
                    b.ToTable("ServerSettings", "RoleplayModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.UserMessage", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("AuthorID")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");
                    b.Property<string>("AuthorNickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_nickname");
                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contents");
                    b.Property<long>("DiscordMessageID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_message_id");
                    b.Property<long?>("RoleplayID")
                        .HasColumnType("bigint")
                        .HasColumnName("roleplay_id");
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");
                    b.HasKey("ID")
                        .HasName("pk_user_messages");
                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_user_messages_author_id");
                    b.HasIndex("RoleplayID")
                        .HasDatabaseName("ix_user_messages_roleplay_id");
                    b.ToTable("UserMessages", "RoleplayModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_users_user_id");
                    b.Navigation("Server");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.Roleplay", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleplays_users_owner_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleplays_servers_server_id");
                    b.Navigation("Owner");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.RoleplayParticipant", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Roleplaying.Model.Roleplay", "Roleplay")
                        .WithMany("ParticipatingUsers")
                        .HasForeignKey("RoleplayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleplay_participants_roleplays_roleplay_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleplay_participants_users_user_id");
                    b.Navigation("Roleplay");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.ServerRoleplaySettings", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_settings_servers_server_id");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.UserMessage", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_messages_users_author_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Roleplaying.Model.Roleplay", null)
                        .WithMany("Messages")
                        .HasForeignKey("RoleplayID")
                        .HasConstraintName("fk_user_messages_roleplays_roleplay_id");
                    b.Navigation("Author");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Navigation("KnownUsers");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Roleplaying.Model.Roleplay", b =>
                {
                    b.Navigation("Messages");
                    b.Navigation("ParticipatingUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
