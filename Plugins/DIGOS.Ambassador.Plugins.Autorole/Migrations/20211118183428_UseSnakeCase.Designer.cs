// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective

// <auto-generated />
using System;
using DIGOS.Ambassador.Plugins.Autorole.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
#nullable disable
namespace DIGOS.Ambassador.Plugins.Autorole.Migrations
{
    [DbContext(typeof(AutoroleDatabaseContext))]
    [Migration("20211118183428_UseSnakeCase")]
    partial class UseSnakeCase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AutoroleModule")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfiguration", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("DiscordRoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_role_id");
                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");
                    b.Property<bool>("RequiresConfirmation")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_confirmation");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.HasKey("ID")
                        .HasName("pk_autorole_configurations");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_autorole_configurations_server_id");
                    b.ToTable("AutoroleConfigurations", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfirmation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("AutoroleID")
                        .HasColumnType("bigint")
                        .HasColumnName("autorole_id");
                    b.Property<bool>("HasNotificationBeenSent")
                        .HasColumnType("boolean")
                        .HasColumnName("has_notification_been_sent");
                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_autorole_confirmations");
                    b.HasIndex("AutoroleID")
                        .HasDatabaseName("ix_autorole_confirmations_autorole_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_autorole_confirmations_user_id");
                    b.ToTable("AutoroleConfirmations", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleServerSettings", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long?>("AffirmationRequiredNotificationChannelID")
                        .HasColumnType("bigint")
                        .HasColumnName("affirmation_required_notification_channel_id");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.HasKey("ID")
                        .HasName("pk_autorole_server_settings");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_autorole_server_settings_server_id");
                    b.ToTable("autorole_server_settings", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long?>("AutoroleConfigurationID")
                        .HasColumnType("bigint")
                        .HasColumnName("autorole_configuration_id");
                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");
                    b.HasKey("ID")
                        .HasName("pk_autorole_conditions");
                    b.HasIndex("AutoroleConfigurationID")
                        .HasDatabaseName("ix_autorole_conditions_autorole_configuration_id");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator<string>("Discriminator").HasValue("AutoroleCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserChannelStatistics", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("ChannelID")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");
                    b.Property<long?>("MessageCount")
                        .HasColumnType("bigint")
                        .HasColumnName("message_count");
                    b.Property<long?>("UserServerStatisticsID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_server_statistics_id");
                    b.HasKey("ID")
                        .HasName("pk_user_channel_statistics");
                    b.HasIndex("UserServerStatisticsID")
                        .HasDatabaseName("ix_user_channel_statistics_user_server_statistics_id");
                    b.HasIndex("ChannelID", "UserServerStatisticsID")
                        .IsUnique()
                        .HasDatabaseName("ix_user_channel_statistics_channel_id_user_server_statistics_id");
                    b.ToTable("UserChannelStatistics", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserServerStatistics", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<DateTimeOffset?>("LastActivityTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_time");
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<long?>("TotalMessageCount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_message_count");
                    b.Property<long?>("UserStatisticsID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_statistics_id");
                    b.HasKey("ID")
                        .HasName("pk_user_server_statistics");
                    b.HasIndex("UserStatisticsID")
                        .HasDatabaseName("ix_user_server_statistics_user_statistics_id");
                    b.HasIndex("ServerID", "UserStatisticsID")
                        .IsUnique()
                        .HasDatabaseName("ix_user_server_statistics_server_id_user_statistics_id");
                    b.ToTable("UserServerStatistics", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserStatistics", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_user_statistics");
                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasDatabaseName("ix_user_statistics_user_id");
                    b.ToTable("UserStatistics", "AutoroleModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");
                    b.Property<bool>("SendJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("send_join_message");
                    b.Property<bool>("SuppressPermissionWarnings")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_permission_warnings");
                    b.HasKey("ID")
                        .HasName("pk_servers");
                    b.ToTable("Servers", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_server_user");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_server_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_user_id");
                    b.ToTable("ServerUser", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");
                    b.HasKey("ID")
                        .HasName("pk_users");
                    b.ToTable("Users", "Core", t => t.ExcludeFromMigrations());
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.MessageCountInSourceCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInChannelCondition>", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<long>("RequiredCount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("RequiredCount");
                    b.Property<long>("SourceID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("SourceID");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("MessageCountInSourceCondition<MessageCountInChannelCondition>");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.MessageCountInSourceCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInGuildCondition>", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<long>("RequiredCount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("RequiredCount");
                    b.Property<long>("SourceID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("SourceID");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("MessageCountInSourceCondition<MessageCountInGuildCondition>");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.TimeSinceEventCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceJoinCondition>", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<TimeSpan>("RequiredTime")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("interval")
                        .HasColumnName("RequiredTime");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("TimeSinceEventCondition<TimeSinceJoinCondition>");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.TimeSinceEventCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceLastActivityCondition>", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<TimeSpan>("RequiredTime")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("interval")
                        .HasColumnName("RequiredTime");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("TimeSinceEventCondition<TimeSinceLastActivityCondition>");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.ReactionCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<long>("ChannelID")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");
                    b.Property<string>("EmoteName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emote_name");
                    b.Property<long>("MessageID")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("ReactionCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.RoleCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition");
                    b.Property<long>("RoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("RoleCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInChannelCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.MessageCountInSourceCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInChannelCondition>");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("MessageCountInChannelCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInGuildCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.MessageCountInSourceCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.MessageCountInGuildCondition>");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("MessageCountInGuildCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceJoinCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.TimeSinceEventCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceJoinCondition>");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("TimeSinceJoinCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceLastActivityCondition", b =>
                {
                    b.HasBaseType("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.TimeSinceEventCondition<DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.TimeSinceLastActivityCondition>");
                    b.ToTable("AutoroleConditions", "AutoroleModule");
                    b.HasDiscriminator().HasValue("TimeSinceLastActivityCondition");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfiguration", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_autorole_configurations_servers_server_id");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfirmation", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfiguration", "Autorole")
                        .WithMany()
                        .HasForeignKey("AutoroleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_autorole_confirmations_autorole_configurations_autorole_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_autorole_confirmations_users_user_id");
                    b.Navigation("Autorole");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleServerSettings", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_autorole_server_settings_servers_server_id");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Conditions.Bases.AutoroleCondition", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfiguration", null)
                        .WithMany("Conditions")
                        .HasForeignKey("AutoroleConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_autorole_conditions_autorole_configurations_autorole_configur");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserChannelStatistics", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserServerStatistics", null)
                        .WithMany("ChannelStatistics")
                        .HasForeignKey("UserServerStatisticsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_channel_statistics_user_server_statistics_user_server_stat");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserServerStatistics", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_server_statistics_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserStatistics", null)
                        .WithMany("ServerStatistics")
                        .HasForeignKey("UserStatisticsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_server_statistics_user_statistics_user_statistics_id");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserStatistics", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_statistics_users_user_id");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_users_user_id");
                    b.Navigation("Server");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.AutoroleConfiguration", b =>
                {
                    b.Navigation("Conditions");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserServerStatistics", b =>
                {
                    b.Navigation("ChannelStatistics");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Autorole.Model.Statistics.UserStatistics", b =>
                {
                    b.Navigation("ServerStatistics");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Navigation("KnownUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
