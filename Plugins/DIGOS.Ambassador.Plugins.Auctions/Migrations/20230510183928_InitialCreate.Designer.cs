// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective

// <auto-generated />
using System;
using DIGOS.Ambassador.Plugins.Auctions.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
#nullable disable
namespace DIGOS.Ambassador.Plugins.Auctions.Migrations
{
    [DbContext(typeof(AuctionsDatabaseContext))]
    [Migration("20230510183928_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AuctionModule")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.Auction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<bool>("AreBidsBinding")
                        .HasColumnType("boolean")
                        .HasColumnName("are_bids_binding");
                    b.Property<decimal?>("BidCap")
                        .HasColumnType("numeric")
                        .HasColumnName("bid_cap");
                    b.Property<decimal?>("Buyout")
                        .HasColumnType("numeric")
                        .HasColumnName("buyout");
                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");
                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");
                    b.Property<decimal?>("MaximumBid")
                        .HasColumnType("numeric")
                        .HasColumnName("maximum_bid");
                    b.Property<decimal?>("MinimumBid")
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_bid");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");
                    b.Property<long>("OwnerID")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");
                    b.Property<int>("Privacy")
                        .HasColumnType("integer")
                        .HasColumnName("privacy");
                    b.Property<long>("ServerId")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<decimal>("StartBid")
                        .HasColumnType("numeric")
                        .HasColumnName("start_bid");
                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");
                    b.Property<TimeSpan?>("TimeExtension")
                        .HasColumnType("interval")
                        .HasColumnName("time_extension");
                    b.HasKey("ID")
                        .HasName("pk_auctions");
                    b.HasIndex("OwnerID")
                        .HasDatabaseName("ix_auctions_owner_id");
                    b.HasIndex("ServerId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_auctions_server_id_name");
                    b.ToTable("auctions", "AuctionModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.AuctionDisplay", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("AuctionID")
                        .HasColumnType("bigint")
                        .HasColumnName("auction_id");
                    b.Property<long>("Channel")
                        .HasColumnType("bigint")
                        .HasColumnName("channel");
                    b.Property<long>("Message")
                        .HasColumnType("bigint")
                        .HasColumnName("message");
                    b.HasKey("ID")
                        .HasName("pk_auction_displays");
                    b.HasIndex("AuctionID")
                        .HasDatabaseName("ix_auction_displays_auction_id");
                    b.ToTable("auction_displays", "AuctionModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.UserBid", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");
                    b.Property<long>("AuctionID")
                        .HasColumnType("bigint")
                        .HasColumnName("auction_id");
                    b.Property<bool>("IsRetracted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_retracted");
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_user_bids");
                    b.HasIndex("AuctionID")
                        .HasDatabaseName("ix_user_bids_auction_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_bids_user_id");
                    b.ToTable("user_bids", "AuctionModule");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");
                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");
                    b.Property<bool>("SendJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("send_join_message");
                    b.Property<bool>("SuppressPermissionWarnings")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_permission_warnings");
                    b.HasKey("ID")
                        .HasName("pk_servers");
                    b.ToTable("Servers", "Core", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");
                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");
                    b.HasKey("ID")
                        .HasName("pk_server_user");
                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_server_id");
                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_user_id");
                    b.ToTable("ServerUser", "Core", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");
                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));
                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");
                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");
                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");
                    b.HasKey("ID")
                        .HasName("pk_users");
                    b.ToTable("Users", "Core", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.Auction", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auctions_users_owner_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auctions_servers_server_id");
                    b.Navigation("Owner");
                    b.Navigation("Server");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.AuctionDisplay", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Auctions.Model.Data.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auction_displays_auctions_auction_id");
                    b.Navigation("Auction");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.UserBid", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Auctions.Model.Data.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_bids_auctions_auction_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_bids_users_user_id");
                    b.Navigation("Auction");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_servers_server_id");
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_users_user_id");
                    b.Navigation("Server");
                    b.Navigation("User");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Auctions.Model.Data.Auction", b =>
                {
                    b.Navigation("Bids");
                });
            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Navigation("KnownUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
