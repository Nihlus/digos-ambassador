// <auto-generated />

#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective

// <auto-generated />
using System.Diagnostics.CodeAnalysis;
using System;
using DIGOS.Ambassador.Plugins.Moderation.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DIGOS.Ambassador.Plugins.Moderation.Migrations
{
    [DbContext(typeof(ModerationDatabaseContext))]
    [ExcludeFromCodeCoverage]
    partial class ModerationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ModerationModule")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");

                    b.Property<string>("JoinMessage")
                        .HasColumnType("text")
                        .HasColumnName("join_message");

                    b.Property<bool>("SendJoinMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("send_join_message");

                    b.Property<bool>("SuppressPermissionWarnings")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_permission_warnings");

                    b.HasKey("ID")
                        .HasName("pk_servers");

                    b.ToTable("Servers", "Core", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_server_user");

                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_user_server_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_server_user_user_id");

                    b.ToTable("ServerUser", "Core", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");

                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.ToTable("Users", "Core", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.ServerModerationSettings", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("ModerationLogChannel")
                        .HasColumnType("bigint")
                        .HasColumnName("moderation_log_channel");

                    b.Property<long?>("MonitoringChannel")
                        .HasColumnType("bigint")
                        .HasColumnName("monitoring_channel");

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");

                    b.Property<int>("WarningThreshold")
                        .HasColumnType("integer")
                        .HasColumnName("warning_threshold");

                    b.HasKey("ID")
                        .HasName("pk_server_moderation_settings");

                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_server_moderation_settings_server_id");

                    b.ToTable("ServerModerationSettings", "ModerationModule");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserBan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("AuthorID")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<long?>("MessageID")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_user_bans");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_user_bans_author_id");

                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_user_bans_server_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_bans_user_id");

                    b.ToTable("UserBans", "ModerationModule");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserNote", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("AuthorID")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_user_notes");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_user_notes_author_id");

                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_user_notes_server_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_notes_user_id");

                    b.ToTable("UserNotes", "ModerationModule");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserWarning", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("AuthorID")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<long?>("MessageID")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint")
                        .HasColumnName("server_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_user_warnings");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_user_warnings_author_id");

                    b.HasIndex("ServerID")
                        .HasDatabaseName("ix_user_warnings_server_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_warnings_user_id");

                    b.ToTable("UserWarnings", "ModerationModule");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Users.ServerUser", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_servers_server_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_user_users_user_id");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.ServerModerationSettings", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_moderation_settings_servers_server_id");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserBan", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_bans_users_author_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_bans_servers_server_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_bans_users_user_id");

                    b.Navigation("Author");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserNote", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notes_users_author_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notes_servers_server_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notes_users_user_id");

                    b.Navigation("Author");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Moderation.Model.UserWarning", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_warnings_users_author_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_warnings_servers_server_id");

                    b.HasOne("DIGOS.Ambassador.Plugins.Core.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_warnings_users_user_id");

                    b.Navigation("Author");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Plugins.Core.Model.Servers.Server", b =>
                {
                    b.Navigation("KnownUsers");
                });
#pragma warning restore 612, 618
        }
    }
}

