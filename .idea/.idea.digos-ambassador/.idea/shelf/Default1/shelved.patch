Index: Plugins/DIGOS.Ambassador.Plugins.Roleplaying/CommandModules/RoleplayCommands.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n//  RoleplayCommands.cs\n//\n//  Author:\n//       Jarl Gullberg <jarl.gullberg@gmail.com>\n//\n//  Copyright (c) 2017 Jarl Gullberg\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU Affero General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU Affero General Public License for more details.\n//\n//  You should have received a copy of the GNU Affero General Public License\n//  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing DIGOS.Ambassador.Core.Extensions;\nusing DIGOS.Ambassador.Discord.Extensions;\nusing DIGOS.Ambassador.Discord.Extensions.Results;\nusing DIGOS.Ambassador.Discord.Feedback;\nusing DIGOS.Ambassador.Discord.Interactivity;\nusing DIGOS.Ambassador.Discord.Pagination;\nusing DIGOS.Ambassador.Discord.TypeReaders;\nusing DIGOS.Ambassador.Plugins.Core.Preconditions;\nusing DIGOS.Ambassador.Plugins.Permissions.Preconditions;\nusing DIGOS.Ambassador.Plugins.Roleplaying.Extensions;\nusing DIGOS.Ambassador.Plugins.Roleplaying.Model;\nusing DIGOS.Ambassador.Plugins.Roleplaying.Permissions;\nusing DIGOS.Ambassador.Plugins.Roleplaying.Services;\nusing DIGOS.Ambassador.Plugins.Roleplaying.Services.Exporters;\nusing Discord;\nusing Discord.Commands;\nusing Discord.Net;\nusing Humanizer;\nusing JetBrains.Annotations;\nusing PermissionTarget = DIGOS.Ambassador.Plugins.Permissions.Model.PermissionTarget;\n\n#pragma warning disable SA1615 // Disable \"Element return value should be documented\" due to TPL tasks\n\nnamespace DIGOS.Ambassador.Plugins.Roleplaying.CommandModules\n{\n    /// <summary>\n    /// Commands for interacting with and managing channel roleplays.\n    /// </summary>\n    [UsedImplicitly]\n    [Alias(\"roleplay\", \"rp\")]\n    [Group(\"roleplay\")]\n    [Summary(\"Commands for interacting with and managing channel roleplays.\")]\n    [Remarks\n    (\n        \"Parameters which take a roleplay can be specified in two ways - by just the name, which will search your \" +\n        \"roleplays, and by mention and name, which will search the given user's roleplays. For example,\\n\" +\n        \"\\n\" +\n        \"Your roleplay: ipsum\\n\" +\n        \"Another user's roleplay: @DIGOS Ambassador:ipsum\\n\" +\n        \"\\n\" +\n        \"You can also substitute any roleplay name for \\\"current\\\", and the active roleplay will be used instead.\"\n    )]\n    public partial class RoleplayCommands : ModuleBase\n    {\n        private readonly RoleplayDiscordService _discordRoleplays;\n        private readonly DedicatedChannelService _dedicatedChannels;\n\n        private readonly UserFeedbackService _feedback;\n        private readonly InteractivityService _interactivity;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"RoleplayCommands\"/> class.\n        /// </summary>\n        /// <param name=\"discordRoleplays\">The roleplay service.</param>\n        /// <param name=\"feedback\">The user feedback service.</param>\n        /// <param name=\"interactivity\">The interactivity service.</param>\n        /// <param name=\"dedicatedChannels\">The dedicated channel service.</param>\n        public RoleplayCommands\n        (\n            RoleplayDiscordService discordRoleplays,\n            UserFeedbackService feedback,\n            InteractivityService interactivity,\n            DedicatedChannelService dedicatedChannels\n        )\n        {\n            _discordRoleplays = discordRoleplays;\n            _feedback = feedback;\n            _interactivity = interactivity;\n            _dedicatedChannels = dedicatedChannels;\n        }\n\n        /// <summary>\n        /// Shows information about the current.\n        /// </summary>\n        [UsedImplicitly]\n        [Alias(\"show\", \"info\")]\n        [Command(\"show\")]\n        [Summary(\"Shows information about the current roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> ShowRoleplayAsync()\n        {\n            if (!(this.Context.Channel is ITextChannel textChannel))\n            {\n                return RuntimeCommandResult.FromError(\"This channel isn't a text channel.\");\n            }\n\n            var getCurrentRoleplayResult = await _discordRoleplays.GetActiveRoleplayAsync(textChannel);\n            if (!getCurrentRoleplayResult.IsSuccess)\n            {\n                return getCurrentRoleplayResult.ToRuntimeResult();\n            }\n\n            var roleplay = getCurrentRoleplayResult.Entity;\n            var eb = await CreateRoleplayInfoEmbedAsync(roleplay);\n\n            await _feedback.SendEmbedAsync(this.Context.Channel, eb);\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Shows information about the named roleplay owned by the specified user.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Alias(\"show\", \"info\")]\n        [Command(\"show\")]\n        [Summary(\"Shows information about the specified roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> ShowRoleplayAsync(Roleplay roleplay)\n        {\n            var eb = await CreateRoleplayInfoEmbedAsync(roleplay);\n\n            await _feedback.SendEmbedAsync(this.Context.Channel, eb);\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        private async Task<Embed> CreateRoleplayInfoEmbedAsync(Roleplay roleplay)\n        {\n            var eb = _feedback.CreateEmbedBase();\n\n            eb.WithAuthor(await this.Context.Client.GetUserAsync((ulong)roleplay.Owner.DiscordID));\n            eb.WithTitle(roleplay.Name);\n            eb.WithDescription(roleplay.Summary);\n\n            eb.AddField(\"Currently\", $\"{(roleplay.IsActive ? \"Active\" : \"Inactive\")}\", true);\n\n            var dedicatedChannelName = roleplay.DedicatedChannelID is null\n                ? \"None\"\n                : MentionUtils.MentionChannel((ulong)roleplay.DedicatedChannelID.Value);\n\n            eb.AddField(\"Dedicated Channel\", dedicatedChannelName, true);\n\n            eb.AddField(\"NSFW\", roleplay.IsNSFW ? \"Yes\" : \"No\");\n            eb.AddField(\"Public\", roleplay.IsPublic ? \"Yes\" : \"No\", true);\n\n            var joinedUsers = roleplay.JoinedUsers.Select(async p => await this.Context.Client.GetUserAsync((ulong)p.User.DiscordID));\n            var joinedMentions = joinedUsers.Select(async u => (await u).Mention);\n\n            var participantList = (await Task.WhenAll(joinedMentions)).Humanize();\n            participantList = string.IsNullOrEmpty(participantList) ? \"None\" : participantList;\n\n            eb.AddField(\"Participants\", $\"{participantList}\");\n\n            return eb.Build();\n        }\n\n        /// <summary>\n        /// Lists all available roleplays in the server.\n        /// </summary>\n        [UsedImplicitly]\n        [Alias(\"list\")]\n        [Command(\"list\")]\n        [Summary(\"Lists all available roleplays in the server.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> ListServerRoleplaysAsync()\n        {\n            var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);\n            if (!getRoleplays.IsSuccess)\n            {\n                return getRoleplays.ToRuntimeResult();\n            }\n\n            var roleplays = getRoleplays.Entity.Where(r => r.IsPublic).ToList();\n\n            var appearance = PaginatedAppearanceOptions.Default;\n            appearance.Title = \"Available Roleplays\";\n\n            var paginatedEmbed = PaginatedEmbedFactory.SimpleFieldsFromCollection\n            (\n                _feedback,\n                _interactivity,\n                this.Context.User,\n                roleplays,\n                r => r.Name,\n                r => r.Summary,\n                \"There are no roleplays in the server that you can view.\",\n                appearance\n            );\n\n            await _interactivity.SendInteractiveMessageAndDeleteAsync\n            (\n                this.Context.Channel,\n                paginatedEmbed,\n                TimeSpan.FromMinutes(5.0)\n            );\n\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Lists the roleplays that the given user owns.\n        /// </summary>\n        /// <param name=\"discordUser\">The user to show the roleplays of.</param>\n        [UsedImplicitly]\n        [Alias(\"list-owned\")]\n        [Command(\"list-owned\")]\n        [Summary(\"Lists the roleplays that the given user owns.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> ListOwnedRoleplaysAsync(IGuildUser? discordUser = null)\n        {\n            if (discordUser is null)\n            {\n                var authorUser = this.Context.User;\n                if (!(authorUser is IGuildUser guildUser))\n                {\n                    return RuntimeCommandResult.FromError(\"The owner isn't a guild user.\");\n                }\n\n                discordUser = guildUser;\n            }\n\n            var getUserRoleplays = await _discordRoleplays.GetUserRoleplaysAsync(discordUser);\n            if (!getUserRoleplays.IsSuccess)\n            {\n                return getUserRoleplays.ToRuntimeResult();\n            }\n\n            var roleplays = getUserRoleplays.Entity.ToList();\n\n            var appearance = PaginatedAppearanceOptions.Default;\n            appearance.Title = \"Your roleplays\";\n            appearance.Author = discordUser;\n\n            var paginatedEmbed = PaginatedEmbedFactory.SimpleFieldsFromCollection\n            (\n                _feedback,\n                _interactivity,\n                this.Context.User,\n                roleplays,\n                r => r.Name,\n                r => r.Summary,\n                \"You don't have any roleplays.\",\n                appearance\n            );\n\n            await _interactivity.SendInteractiveMessageAndDeleteAsync\n            (\n                this.Context.Channel,\n                paginatedEmbed,\n                TimeSpan.FromMinutes(5.0)\n            );\n\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Creates a new roleplay with the specified name.\n        /// </summary>\n        /// <param name=\"roleplayName\">The user-unique name of the roleplay.</param>\n        /// <param name=\"roleplaySummary\">A summary of the roleplay.</param>\n        /// <param name=\"isNSFW\">Whether or not the roleplay is NSFW.</param>\n        /// <param name=\"isPublic\">Whether or not the roleplay is public.</param>\n        [UsedImplicitly]\n        [Command(\"create\")]\n        [Summary(\"Creates a new roleplay with the specified name.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(CreateRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> CreateRoleplayAsync\n        (\n            string roleplayName,\n            string roleplaySummary = \"No summary set.\",\n            bool isNSFW = false,\n            bool isPublic = true\n        )\n        {\n            if (!(this.Context.User is IGuildUser guildUser))\n            {\n                return RuntimeCommandResult.FromError(\"The current user isn't a guild user.\");\n            }\n\n            var result = await _discordRoleplays.CreateRoleplayAsync\n            (\n                guildUser,\n                roleplayName,\n                roleplaySummary,\n                isNSFW,\n                isPublic\n            );\n\n            if (!result.IsSuccess)\n            {\n                return result.ToRuntimeResult();\n            }\n\n            return RuntimeCommandResult.FromSuccess($\"Roleplay \\\"{result.Entity.Name}\\\" created.\");\n        }\n\n        /// <summary>\n        /// Deletes the specified roleplay.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"delete\")]\n        [Summary(\"Deletes the specified roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(DeleteRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> DeleteRoleplayAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(DeleteRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var deletionResult = await _discordRoleplays.DeleteRoleplayAsync(roleplay);\n            if (!deletionResult.IsSuccess)\n            {\n                return deletionResult.ToRuntimeResult();\n            }\n\n            var canReplyInChannelAfterDeletion = (long)this.Context.Channel.Id != roleplay.DedicatedChannelID;\n            if (canReplyInChannelAfterDeletion)\n            {\n                return RuntimeCommandResult.FromSuccess($\"Roleplay \\\"{roleplay.Name}\\\" deleted.\");\n            }\n\n            var eb = _feedback.CreateEmbedBase();\n            eb.WithDescription($\"Roleplay \\\"{roleplay.Name}\\\" deleted.\");\n\n            await _feedback.SendPrivateEmbedAsync(this.Context, this.Context.User, eb.Build(), false);\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Joins the roleplay owned by the given person with the given name.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"join\")]\n        [Summary(\"Joins the roleplay owned by the given person with the given name.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(JoinRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> JoinRoleplayAsync(Roleplay roleplay)\n        {\n            if (!(this.Context.User is IGuildUser guildUser))\n            {\n                return RuntimeCommandResult.FromError(\"The current user isn't a guild user.\");\n            }\n\n            var addUserResult = await _discordRoleplays.AddUserToRoleplayAsync(roleplay, guildUser);\n            if (!addUserResult.IsSuccess)\n            {\n                return addUserResult.ToRuntimeResult();\n            }\n\n            var roleplayOwnerUser = await this.Context.Guild.GetUserAsync((ulong)roleplay.Owner.DiscordID);\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"Joined {roleplayOwnerUser.Mention}'s roleplay \\\"{roleplay.Name}\\\"\"\n            );\n        }\n\n        /// <summary>\n        /// Invites the specified user to the given roleplay.\n        /// </summary>\n        /// <param name=\"playerToInvite\">The player to invite.</param>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"invite\")]\n        [Summary(\"Invites the specified user to the given roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(EditRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> InvitePlayerAsync\n        (\n            IGuildUser playerToInvite,\n            [RequireEntityOwnerOrPermission(typeof(EditRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var invitePlayerResult = await _discordRoleplays.InviteUserToRoleplayAsync(roleplay, playerToInvite);\n            if (!invitePlayerResult.IsSuccess)\n            {\n                return invitePlayerResult.ToRuntimeResult();\n            }\n\n            var userDMChannel = await playerToInvite.GetOrCreateDMChannelAsync();\n            try\n            {\n                var roleplayName = roleplay.Name.Contains(\" \") ? roleplay.Name.Quote() : roleplay.Name;\n\n                await userDMChannel.SendMessageAsync\n                (\n                    $\"You've been invited to join {roleplay.Name}. Use `!rp join {roleplayName}` to join.\"\n                );\n            }\n            catch (HttpException hex) when (hex.WasCausedByDMsNotAccepted())\n            {\n            }\n            finally\n            {\n                await userDMChannel.CloseAsync();\n            }\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"Invited {playerToInvite.Mention} to {roleplay.Name}.\"\n            );\n        }\n\n        /// <summary>\n        /// Leaves the roleplay owned by the given person with the given name.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"leave\")]\n        [Summary(\"Leaves the roleplay owned by the given person with the given name.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> LeaveRoleplayAsync(Roleplay roleplay)\n        {\n            if (!(this.Context.User is IGuildUser guildUser))\n            {\n                return RuntimeCommandResult.FromError(\"The current user isn't a guild user.\");\n            }\n\n            var removeUserResult = await _discordRoleplays.RemoveUserFromRoleplayAsync(roleplay, guildUser);\n            if (!removeUserResult.IsSuccess)\n            {\n                return removeUserResult.ToRuntimeResult();\n            }\n\n            var roleplayOwnerUser = await this.Context.Guild.GetUserAsync((ulong)roleplay.Owner.DiscordID);\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"Left {roleplayOwnerUser.Mention}'s roleplay \\\"{roleplay.Name}\\\"\"\n            );\n        }\n\n        /// <summary>\n        /// Kicks the given user from the named roleplay.\n        /// </summary>\n        /// <param name=\"discordUser\">The user to kick.</param>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"kick\")]\n        [Summary(\"Kicks the given user from the named roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(KickRoleplayMember), PermissionTarget.Self)]\n        public async Task<RuntimeResult> KickRoleplayParticipantAsync\n        (\n            IGuildUser discordUser,\n            [RequireEntityOwnerOrPermission(typeof(KickRoleplayMember), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var kickUserResult = await _discordRoleplays.KickUserFromRoleplayAsync(roleplay, discordUser);\n            if (!kickUserResult.IsSuccess)\n            {\n                return kickUserResult.ToRuntimeResult();\n            }\n\n            var userDMChannel = await discordUser.GetOrCreateDMChannelAsync();\n            try\n            {\n                await userDMChannel.SendMessageAsync\n                (\n                    $\"You've been removed from the roleplay \\\"{roleplay.Name}\\\" by \" +\n                    $\"{this.Context.Message.Author.Username}.\"\n                );\n            }\n            catch (HttpException hex) when (hex.WasCausedByDMsNotAccepted())\n            {\n            }\n            finally\n            {\n                await userDMChannel.CloseAsync();\n            }\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"{discordUser.Mention} has been kicked from {roleplay.Name}.\"\n            );\n        }\n\n        /// <summary>\n        /// Displays the existing or creates a dedicated channel for the roleplay.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"channel\")]\n        [Summary(\"Makes the roleplay with the given name current in the current channel.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> ShowOrCreateDedicatedRoleplayChannel\n        (\n            [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync\n            (\n                this.Context.Guild,\n                roleplay\n            );\n\n            if (getDedicatedChannelResult.IsSuccess)\n            {\n                var existingDedicatedChannel = getDedicatedChannelResult.Entity;\n                var message = $\"\\\"{roleplay.Name}\\\" has a dedicated channel at \" +\n                              $\"{MentionUtils.MentionChannel(existingDedicatedChannel.Id)}\";\n\n                return RuntimeCommandResult.FromSuccess(message);\n            }\n\n            await _feedback.SendConfirmationAsync(this.Context, \"Setting up dedicated channel...\");\n\n            // The roleplay either doesn't have a channel, or the one it has has been deleted or is otherwise invalid.\n            var result = await _dedicatedChannels.CreateDedicatedChannelAsync\n            (\n                this.Context.Guild,\n                roleplay\n            );\n\n            if (!result.IsSuccess)\n            {\n                return result.ToRuntimeResult();\n            }\n\n            var dedicatedChannel = result.Entity;\n\n            if (!roleplay.IsActive || roleplay.ActiveChannelID == (long)dedicatedChannel.Id)\n            {\n                return RuntimeCommandResult.FromSuccess\n                (\n                    $\"All done! Your roleplay now has a dedicated channel at \" +\n                    $\"{MentionUtils.MentionChannel(dedicatedChannel.Id)}.\"\n                );\n            }\n\n            var stopResult = await StopRoleplayAsync(roleplay);\n            if (!stopResult.IsSuccess)\n            {\n                return stopResult;\n            }\n\n            var startResult = await StartRoleplayAsync(roleplay);\n            if (!startResult.IsSuccess)\n            {\n                return startResult;\n            }\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"All done! Your roleplay now has a dedicated channel at \" +\n                $\"{MentionUtils.MentionChannel(dedicatedChannel.Id)}.\"\n            );\n        }\n\n        /// <summary>\n        /// Starts the roleplay with the given name.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"start\")]\n        [Summary(\"Starts the roleplay with the given name.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> StartRoleplayAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var startRoleplayResult = await _discordRoleplays.StartRoleplayAsync\n            (\n                (ITextChannel)this.Context.Channel,\n                roleplay\n            );\n\n            if (!startRoleplayResult.IsSuccess)\n            {\n                return startRoleplayResult.ToRuntimeResult();\n            }\n\n            var joinedUsers = roleplay.JoinedUsers.Select\n            (\n                async p => await this.Context.Client.GetUserAsync((ulong)p.User.DiscordID)\n            );\n\n            var joinedMentions = joinedUsers.Select(async u => (await u).Mention);\n\n            var channel = await this.Context.Guild.GetTextChannelAsync((ulong)roleplay.ActiveChannelID!);\n            var participantList = (await Task.WhenAll(joinedMentions)).Humanize();\n\n            await channel.SendMessageAsync($\"Calling {participantList}!\");\n\n            var activationMessage = $\"The roleplay \\\"{roleplay.Name}\\\" is now active in \" +\n                                    $\"{MentionUtils.MentionChannel(channel.Id)}.\";\n\n            return RuntimeCommandResult.FromSuccess(activationMessage);\n        }\n\n        /// <summary>\n        /// Stops the given roleplay.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"stop\")]\n        [Summary(\"Stops the given roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> StopRoleplayAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var stopRoleplayAsync = await _discordRoleplays.StopRoleplayAsync(roleplay);\n            if (!stopRoleplayAsync.IsSuccess)\n            {\n                return stopRoleplayAsync.ToRuntimeResult();\n            }\n\n            return RuntimeCommandResult.FromSuccess($\"The roleplay \\\"{roleplay.Name}\\\" has been stopped.\");\n        }\n\n        /// <summary>\n        /// Includes previous messages into the roleplay, starting at the given time.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        /// <param name=\"startMessage\">The earliest message to start adding from.</param>\n        /// <param name=\"finalMessage\">The final message in the range.</param>\n        [UsedImplicitly]\n        [Command(\"include-previous\")]\n        [Summary(\"Includes previous messages into the roleplay, starting at the given message.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(EditRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> IncludePreviousMessagesAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(EditRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay,\n            [OverrideTypeReader(typeof(UncachedMessageTypeReader<IMessage>))]\n            IMessage startMessage,\n            [OverrideTypeReader(typeof(UncachedMessageTypeReader<IMessage>))]\n            IMessage? finalMessage = null\n        )\n        {\n            finalMessage ??= this.Context.Message;\n\n            if (startMessage.Channel != finalMessage.Channel)\n            {\n                return RuntimeCommandResult.FromError(\"The messages are not in the same channel.\");\n            }\n\n            var addedOrUpdatedMessageCount = 0;\n\n            var latestMessage = startMessage;\n            while (latestMessage.Timestamp < finalMessage.Timestamp)\n            {\n                var messages = (await this.Context.Channel.GetMessagesAsync\n                (\n                    latestMessage, Direction.After\n                ).FlattenAsync()).OrderBy(m => m.Timestamp).ToList();\n\n                latestMessage = messages.Last();\n\n                foreach (var message in messages)\n                {\n                    // Jump out if we've passed the final message\n                    if (message.Timestamp > finalMessage.Timestamp)\n                    {\n                        break;\n                    }\n\n                    if (!(message is IUserMessage userMessage))\n                    {\n                        continue;\n                    }\n\n                    var modifyResult = await _discordRoleplays.ConsumeMessageAsync(userMessage);\n                    if (modifyResult.IsSuccess)\n                    {\n                        ++addedOrUpdatedMessageCount;\n                    }\n                }\n            }\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"{addedOrUpdatedMessageCount} messages added to \\\"{roleplay.Name}\\\".\"\n            );\n        }\n\n        /// <summary>\n        /// Transfers ownership of the named roleplay to the specified user.\n        /// </summary>\n        /// <param name=\"newOwner\">The new owner.</param>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"transfer-ownership\")]\n        [Summary(\"Transfers ownership of the named roleplay to the specified user.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(TransferRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> TransferRoleplayOwnershipAsync\n        (\n            IGuildUser newOwner,\n            [RequireEntityOwnerOrPermission(typeof(TransferRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay\n        )\n        {\n            var transferResult = await _discordRoleplays.TransferRoleplayOwnershipAsync\n            (\n                newOwner,\n                roleplay\n            );\n\n            if (!transferResult.IsSuccess)\n            {\n                return transferResult.ToRuntimeResult();\n            }\n\n            return RuntimeCommandResult.FromSuccess(\"Roleplay ownership transferred.\");\n        }\n\n        /// <summary>\n        /// Exports the named roleplay owned by the given user, sending you a file with the contents.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        /// <param name=\"format\">The export format.</param>\n        [UsedImplicitly]\n        [Command(\"export\")]\n        [Summary(\" Exports the named roleplay owned by the given user, sending you a file with the contents.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(ExportRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> ExportRoleplayAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(ExportRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay,\n            [OverrideTypeReader(typeof(HumanizerEnumTypeReader<ExportFormat>))]\n            ExportFormat format = ExportFormat.PDF\n        )\n        {\n            IRoleplayExporter exporter;\n            switch (format)\n            {\n                case ExportFormat.PDF:\n                {\n                    exporter = new PDFRoleplayExporter(this.Context.Guild);\n                    break;\n                }\n                case ExportFormat.Plaintext:\n                {\n                    exporter = new PlaintextRoleplayExporter(this.Context.Guild);\n                    break;\n                }\n                default:\n                {\n                    return RuntimeCommandResult.FromError(\"That export format hasn't been implemented yet.\");\n                }\n            }\n\n            await _feedback.SendConfirmationAsync(this.Context, \"Compiling the roleplay...\");\n            using var output = await exporter.ExportAsync(roleplay);\n\n            await this.Context.Channel.SendFileAsync(output.Data, $\"{output.Title}.{output.Format.GetFileExtension()}\");\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Replays the named roleplay owned by the given user to you.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        /// <param name=\"from\">The time from which you want to replay.</param>\n        /// <param name=\"to\">The time until you want to replay.</param>\n        [UsedImplicitly]\n        [Command(\"replay\")]\n        [Summary(\"Replays the named roleplay owned by the given user to you.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(ExportRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> ReplayRoleplayAsync\n        (\n            [RequireEntityOwnerOrPermission(typeof(ExportRoleplay), PermissionTarget.Other)]\n            Roleplay roleplay,\n            DateTimeOffset from = default,\n            DateTimeOffset to = default\n        )\n        {\n            if (from == default)\n            {\n                from = DateTimeOffset.MinValue;\n            }\n\n            if (to == default)\n            {\n                to = DateTimeOffset.Now;\n            }\n\n            var userDMChannel = await this.Context.Message.Author.GetOrCreateDMChannelAsync();\n            var eb = await CreateRoleplayInfoEmbedAsync(roleplay);\n\n            try\n            {\n                await userDMChannel.SendMessageAsync(string.Empty, false, eb);\n\n                var messages = roleplay.Messages.Where\n                (\n                    m =>\n                        m.Timestamp > from && m.Timestamp < to\n                )\n                .OrderBy(msg => msg.Timestamp).ToList();\n\n                var timestampEmbed = _feedback.CreateFeedbackEmbed\n                (\n                    this.Context.User,\n                    Color.DarkPurple,\n                    $\"Roleplay began at {messages.First().Timestamp.ToUniversalTime()}\"\n                );\n\n                await userDMChannel.SendMessageAsync(string.Empty, false, timestampEmbed);\n\n                if (messages.Count <= 0)\n                {\n                    await userDMChannel.SendMessageAsync(\"No messages found in the specified timeframe.\");\n                    return RuntimeCommandResult.FromSuccess();\n                }\n\n                await _feedback.SendConfirmationAsync\n                (\n                    this.Context,\n                    $\"Replaying \\\"{roleplay.Name}\\\". Please check your private messages.\"\n                );\n\n                const int messageCharacterLimit = 2000;\n                var sb = new StringBuilder(messageCharacterLimit);\n\n                foreach (var message in messages)\n                {\n                    var newContent = $\"**{message.AuthorNickname}** {message.Contents}\\n\";\n\n                    if (sb.Length + newContent.Length >= messageCharacterLimit)\n                    {\n                        await userDMChannel.SendMessageAsync(sb.ToString());\n                        await Task.Delay(TimeSpan.FromSeconds(2));\n\n                        sb.Clear();\n                        sb.AppendLine();\n                    }\n\n                    sb.Append(newContent);\n\n                    if (message.ID == messages.Last().ID)\n                    {\n                        await userDMChannel.SendMessageAsync(sb.ToString());\n                    }\n                }\n            }\n            catch (HttpException hex) when (hex.WasCausedByDMsNotAccepted())\n            {\n                await _feedback.SendWarningAsync\n                (\n                    this.Context,\n                    \"I can't do that, since you don't accept DMs from non-friends on this server.\"\n                );\n            }\n            finally\n            {\n                await userDMChannel.CloseAsync();\n            }\n\n            return RuntimeCommandResult.FromSuccess();\n        }\n\n        /// <summary>\n        /// Views the given roleplay, allowing you to read the channel.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"view\")]\n        [Summary(\"Views the given roleplay, allowing you to read the channel.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> ViewRoleplayAsync(Roleplay roleplay)\n        {\n            var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync\n            (\n                this.Context.Guild,\n                roleplay\n            );\n\n            if (!getDedicatedChannelResult.IsSuccess)\n            {\n                return RuntimeCommandResult.FromError\n                (\n                    \"The given roleplay doesn't have a dedicated channel. Try using \\\"!rp export\\\" instead.\"\n                );\n            }\n\n            var user = this.Context.User;\n            if (!roleplay.IsPublic && roleplay.ParticipatingUsers.All(p => p.User.DiscordID != (long)user.Id))\n            {\n                return RuntimeCommandResult.FromError\n                (\n                    \"You don't have permission to view that roleplay.\"\n                );\n            }\n\n            var dedicatedChannel = getDedicatedChannelResult.Entity;\n            await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, true);\n\n            var channelMention = MentionUtils.MentionChannel(dedicatedChannel.Id);\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"The roleplay \\\"{roleplay.Name}\\\" is now visible in {channelMention}.\"\n            );\n        }\n\n        /// <summary>\n        /// Hides the given roleplay.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"hide\")]\n        [Summary(\"Hides the given roleplay.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> HideRoleplayAsync(Roleplay roleplay)\n        {\n            var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync\n            (\n                this.Context.Guild,\n                roleplay\n            );\n\n            if (!getDedicatedChannelResult.IsSuccess)\n            {\n                return RuntimeCommandResult.FromError\n                (\n                    \"The given roleplay doesn't have a dedicated channel.\"\n                );\n            }\n\n            var user = this.Context.User;\n            var dedicatedChannel = getDedicatedChannelResult.Entity;\n            await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, false);\n\n            return RuntimeCommandResult.FromSuccess(\"Roleplay hidden.\");\n        }\n\n        /// <summary>\n        /// Hides all roleplays in the server for the user.\n        /// </summary>\n        [UsedImplicitly]\n        [Command(\"hide-all\")]\n        [Summary(\"Hides all roleplays in the server for the user.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> HideAllRoleplaysAsync()\n        {\n            var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);\n            if (!getRoleplays.IsSuccess)\n            {\n                return getRoleplays.ToRuntimeResult();\n            }\n\n            var roleplays = getRoleplays.Entity.ToList();\n            foreach (var roleplay in roleplays)\n            {\n                var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync\n                (\n                    this.Context.Guild,\n                    roleplay\n                );\n\n                if (!getDedicatedChannelResult.IsSuccess)\n                {\n                    continue;\n                }\n\n                var user = this.Context.User;\n                var dedicatedChannel = getDedicatedChannelResult.Entity;\n                await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, false);\n            }\n\n            return RuntimeCommandResult.FromSuccess(\"Roleplays hidden.\");\n        }\n\n        /// <summary>\n        /// Manually refreshes the given roleplay, resetting its last-updated time to now.\n        /// </summary>\n        /// <param name=\"roleplay\">The roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"refresh\")]\n        [Summary(\"Manually refreshes the given roleplay, resetting its last-updated time to now.\")]\n        [RequireContext(ContextType.Guild)]\n        public async Task<RuntimeResult> RefreshRoleplayAsync(Roleplay roleplay)\n        {\n            var isOwner = roleplay.IsOwner(this.Context.User);\n            var isParticipant = roleplay.HasJoined(this.Context.User);\n\n            if (!(isOwner || isParticipant))\n            {\n                return RuntimeCommandResult.FromError(\"You don't own that roleplay, nor are you a participant.\");\n            }\n\n            var refreshResult = await _discordRoleplays.RefreshRoleplayAsync(roleplay);\n            if (!refreshResult.IsSuccess)\n            {\n                return refreshResult.ToRuntimeResult();\n            }\n\n            return RuntimeCommandResult.FromSuccess(\"Timeout refreshed.\");\n        }\n\n        /// <summary>\n        /// Resets the permission set of all dedicated channels.\n        /// </summary>\n        [UsedImplicitly]\n        [Command(\"reset-permissions\")]\n        [Summary(\"Resets the permission set of all dedicated channels.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(EditRoleplayServerSettings), PermissionTarget.All)]\n        public async Task<RuntimeResult> ResetChannelPermissionsAsync()\n        {\n            await _feedback.SendConfirmationAsync(this.Context, \"Working...\");\n\n            var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);\n            if (!getRoleplays.IsSuccess)\n            {\n                return getRoleplays.ToRuntimeResult();\n            }\n\n            var roleplays = getRoleplays.Entity.ToList();\n\n            foreach (var roleplay in roleplays)\n            {\n                if (!roleplay.DedicatedChannelID.HasValue)\n                {\n                    continue;\n                }\n\n                var reset = await _dedicatedChannels.ResetChannelPermissionsAsync(this.Context.Guild, roleplay);\n                if (!reset.IsSuccess)\n                {\n                    await _feedback.SendErrorAsync(this.Context, reset.ErrorReason);\n                }\n            }\n\n            return RuntimeCommandResult.FromSuccess(\"Permissions reset.\");\n        }\n\n        /// <summary>\n        /// Moves an ongoing roleplay outside of the bot's systems into a channel with the given name.\n        /// </summary>\n        /// <param name=\"newName\">The name of the new bot-managed roleplay.</param>\n        /// <param name=\"participants\">The participants of the roleplay.</param>\n        [UsedImplicitly]\n        [Command(\"move-to\")]\n        [Alias(\"move-to\", \"copy-to\", \"move\")]\n        [Summary(\"Moves an ongoing roleplay outside of the bot's systems into a channel with the given name.\")]\n        [RequireContext(ContextType.Guild)]\n        [RequirePermission(typeof(CreateRoleplay), PermissionTarget.Self)]\n        public async Task<RuntimeResult> MoveRoleplayIntoChannelAsync(string newName, params IGuildUser[] participants)\n        {\n            if (!(this.Context.User is IGuildUser guildUser))\n            {\n                return RuntimeCommandResult.FromError(\"The current user isn't a guild user.\");\n            }\n\n            var createRoleplayAsync = await _discordRoleplays.CreateRoleplayAsync\n            (\n                guildUser,\n                newName,\n                \"No summary set.\",\n                false,\n                true\n            );\n\n            if (!createRoleplayAsync.IsSuccess)\n            {\n                return createRoleplayAsync.ToRuntimeResult();\n            }\n\n            var roleplay = createRoleplayAsync.Entity;\n\n            foreach (var participant in participants)\n            {\n                if (participant == this.Context.User)\n                {\n                    // Already added\n                    continue;\n                }\n\n                var addParticipantAsync = await _discordRoleplays.AddUserToRoleplayAsync(roleplay, participant);\n                if (addParticipantAsync.IsSuccess)\n                {\n                    continue;\n                }\n\n                var message =\n                    $\"I couldn't add {participant.Mention} to the roleplay ({addParticipantAsync.ErrorReason}. \" +\n                    $\"Please try to invite them manually.\";\n\n                await _feedback.SendWarningAsync\n                (\n                    this.Context,\n                    message\n                );\n            }\n\n            var participantMessages = new List<IMessage>();\n\n            // Copy the last messages from the participants\n            foreach (var participant in participants)\n            {\n                // Find the last message in the current channel from the user\n                var channel = this.Context.Channel;\n                var messageBatch = await channel.GetMessagesAsync(this.Context.Message, Direction.Before)\n                    .FlattenAsync();\n\n                foreach (var message in messageBatch)\n                {\n                    if (message.Author != participant)\n                    {\n                        continue;\n                    }\n\n                    participantMessages.Add(message);\n                    break;\n                }\n            }\n\n            var getDedicatedChannel = await _dedicatedChannels.GetDedicatedChannelAsync(this.Context.Guild, roleplay);\n            if (!getDedicatedChannel.IsSuccess)\n            {\n                return getDedicatedChannel.ToRuntimeResult();\n            }\n\n            var dedicatedChannel = getDedicatedChannel.Entity;\n\n            foreach (var participantMessage in participantMessages.OrderByDescending(m => m.Timestamp))\n            {\n                var messageLink = participantMessage.GetJumpUrl();\n                await dedicatedChannel.SendMessageAsync(messageLink);\n            }\n\n            var startRoleplayAsync = await _discordRoleplays.StartRoleplayAsync\n            (\n                (ITextChannel)this.Context.Channel,\n                roleplay\n            );\n\n            if (!startRoleplayAsync.IsSuccess)\n            {\n                return startRoleplayAsync.ToRuntimeResult();\n            }\n\n            var joinedUsers = roleplay.JoinedUsers.Select(async p => await this.Context.Client.GetUserAsync((ulong)p.User.DiscordID));\n            var joinedMentions = joinedUsers.Select(async u => (await u).Mention);\n\n            var participantList = (await Task.WhenAll(joinedMentions)).Humanize();\n            await dedicatedChannel.SendMessageAsync($\"Calling {participantList}!\");\n\n            return RuntimeCommandResult.FromSuccess\n            (\n                $\"All done! Your roleplay is now available in {MentionUtils.MentionChannel(dedicatedChannel.Id)}.\"\n            );\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Plugins/DIGOS.Ambassador.Plugins.Roleplaying/CommandModules/RoleplayCommands.cs b/Plugins/DIGOS.Ambassador.Plugins.Roleplaying/CommandModules/RoleplayCommands.cs
--- a/Plugins/DIGOS.Ambassador.Plugins.Roleplaying/CommandModules/RoleplayCommands.cs	(revision 94c478847f31cdffa0df2b571bff9f2a27762a75)
+++ b/Plugins/DIGOS.Ambassador.Plugins.Roleplaying/CommandModules/RoleplayCommands.cs	(date 1615658116654)
@@ -104,24 +104,24 @@
         [Command("show")]
         [Summary("Shows information about the current roleplay.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> ShowRoleplayAsync()
+        public async Task<Result> ShowRoleplayAsync()
         {
             if (!(this.Context.Channel is ITextChannel textChannel))
             {
-                return RuntimeCommandResult.FromError("This channel isn't a text channel.");
+                return Result.FromError("This channel isn't a text channel.");
             }
 
             var getCurrentRoleplayResult = await _discordRoleplays.GetActiveRoleplayAsync(textChannel);
             if (!getCurrentRoleplayResult.IsSuccess)
             {
-                return getCurrentRoleplayResult.ToRuntimeResult();
+                return getCurrentRoleplayResult.ToResult();
             }
 
             var roleplay = getCurrentRoleplayResult.Entity;
             var eb = await CreateRoleplayInfoEmbedAsync(roleplay);
 
             await _feedback.SendEmbedAsync(this.Context.Channel, eb);
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -133,12 +133,12 @@
         [Command("show")]
         [Summary("Shows information about the specified roleplay.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> ShowRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> ShowRoleplayAsync(Roleplay roleplay)
         {
             var eb = await CreateRoleplayInfoEmbedAsync(roleplay);
 
             await _feedback.SendEmbedAsync(this.Context.Channel, eb);
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         private async Task<Embed> CreateRoleplayInfoEmbedAsync(Roleplay roleplay)
@@ -179,12 +179,12 @@
         [Command("list")]
         [Summary("Lists all available roleplays in the server.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> ListServerRoleplaysAsync()
+        public async Task<Result> ListServerRoleplaysAsync()
         {
             var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);
             if (!getRoleplays.IsSuccess)
             {
-                return getRoleplays.ToRuntimeResult();
+                return getRoleplays.ToResult();
             }
 
             var roleplays = getRoleplays.Entity.Where(r => r.IsPublic).ToList();
@@ -211,7 +211,7 @@
                 TimeSpan.FromMinutes(5.0)
             );
 
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -223,14 +223,14 @@
         [Command("list-owned")]
         [Summary("Lists the roleplays that the given user owns.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> ListOwnedRoleplaysAsync(IGuildUser? discordUser = null)
+        public async Task<Result> ListOwnedRoleplaysAsync(IGuildUser? discordUser = null)
         {
             if (discordUser is null)
             {
                 var authorUser = this.Context.User;
                 if (!(authorUser is IGuildUser guildUser))
                 {
-                    return RuntimeCommandResult.FromError("The owner isn't a guild user.");
+                    return Result.FromError("The owner isn't a guild user.");
                 }
 
                 discordUser = guildUser;
@@ -239,7 +239,7 @@
             var getUserRoleplays = await _discordRoleplays.GetUserRoleplaysAsync(discordUser);
             if (!getUserRoleplays.IsSuccess)
             {
-                return getUserRoleplays.ToRuntimeResult();
+                return getUserRoleplays.ToResult();
             }
 
             var roleplays = getUserRoleplays.Entity.ToList();
@@ -267,7 +267,7 @@
                 TimeSpan.FromMinutes(5.0)
             );
 
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -282,7 +282,7 @@
         [Summary("Creates a new roleplay with the specified name.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(CreateRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> CreateRoleplayAsync
+        public async Task<Result> CreateRoleplayAsync
         (
             string roleplayName,
             string roleplaySummary = "No summary set.",
@@ -292,7 +292,7 @@
         {
             if (!(this.Context.User is IGuildUser guildUser))
             {
-                return RuntimeCommandResult.FromError("The current user isn't a guild user.");
+                return Result.FromError("The current user isn't a guild user.");
             }
 
             var result = await _discordRoleplays.CreateRoleplayAsync
@@ -306,10 +306,10 @@
 
             if (!result.IsSuccess)
             {
-                return result.ToRuntimeResult();
+                return result.ToResult();
             }
 
-            return RuntimeCommandResult.FromSuccess($"Roleplay \"{result.Entity.Name}\" created.");
+            return Result.FromSuccess($"Roleplay \"{result.Entity.Name}\" created.");
         }
 
         /// <summary>
@@ -321,7 +321,7 @@
         [Summary("Deletes the specified roleplay.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(DeleteRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> DeleteRoleplayAsync
+        public async Task<Result> DeleteRoleplayAsync
         (
             [RequireEntityOwnerOrPermission(typeof(DeleteRoleplay), PermissionTarget.Other)]
             Roleplay roleplay
@@ -330,20 +330,20 @@
             var deletionResult = await _discordRoleplays.DeleteRoleplayAsync(roleplay);
             if (!deletionResult.IsSuccess)
             {
-                return deletionResult.ToRuntimeResult();
+                return deletionResult.ToResult();
             }
 
             var canReplyInChannelAfterDeletion = (long)this.Context.Channel.Id != roleplay.DedicatedChannelID;
             if (canReplyInChannelAfterDeletion)
             {
-                return RuntimeCommandResult.FromSuccess($"Roleplay \"{roleplay.Name}\" deleted.");
+                return Result.FromSuccess($"Roleplay \"{roleplay.Name}\" deleted.");
             }
 
             var eb = _feedback.CreateEmbedBase();
             eb.WithDescription($"Roleplay \"{roleplay.Name}\" deleted.");
 
             await _feedback.SendPrivateEmbedAsync(this.Context, this.Context.User, eb.Build(), false);
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -355,22 +355,22 @@
         [Summary("Joins the roleplay owned by the given person with the given name.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(JoinRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> JoinRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> JoinRoleplayAsync(Roleplay roleplay)
         {
             if (!(this.Context.User is IGuildUser guildUser))
             {
-                return RuntimeCommandResult.FromError("The current user isn't a guild user.");
+                return Result.FromError("The current user isn't a guild user.");
             }
 
             var addUserResult = await _discordRoleplays.AddUserToRoleplayAsync(roleplay, guildUser);
             if (!addUserResult.IsSuccess)
             {
-                return addUserResult.ToRuntimeResult();
+                return addUserResult.ToResult();
             }
 
             var roleplayOwnerUser = await this.Context.Guild.GetUserAsync((ulong)roleplay.Owner.DiscordID);
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"Joined {roleplayOwnerUser.Mention}'s roleplay \"{roleplay.Name}\""
             );
@@ -386,7 +386,7 @@
         [Summary("Invites the specified user to the given roleplay.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(EditRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> InvitePlayerAsync
+        public async Task<Result> InvitePlayerAsync
         (
             IGuildUser playerToInvite,
             [RequireEntityOwnerOrPermission(typeof(EditRoleplay), PermissionTarget.Other)]
@@ -396,7 +396,7 @@
             var invitePlayerResult = await _discordRoleplays.InviteUserToRoleplayAsync(roleplay, playerToInvite);
             if (!invitePlayerResult.IsSuccess)
             {
-                return invitePlayerResult.ToRuntimeResult();
+                return invitePlayerResult.ToResult();
             }
 
             var userDMChannel = await playerToInvite.GetOrCreateDMChannelAsync();
@@ -417,7 +417,7 @@
                 await userDMChannel.CloseAsync();
             }
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"Invited {playerToInvite.Mention} to {roleplay.Name}."
             );
@@ -431,21 +431,21 @@
         [Command("leave")]
         [Summary("Leaves the roleplay owned by the given person with the given name.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> LeaveRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> LeaveRoleplayAsync(Roleplay roleplay)
         {
             if (!(this.Context.User is IGuildUser guildUser))
             {
-                return RuntimeCommandResult.FromError("The current user isn't a guild user.");
+                return Result.FromError("The current user isn't a guild user.");
             }
 
             var removeUserResult = await _discordRoleplays.RemoveUserFromRoleplayAsync(roleplay, guildUser);
             if (!removeUserResult.IsSuccess)
             {
-                return removeUserResult.ToRuntimeResult();
+                return removeUserResult.ToResult();
             }
 
             var roleplayOwnerUser = await this.Context.Guild.GetUserAsync((ulong)roleplay.Owner.DiscordID);
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"Left {roleplayOwnerUser.Mention}'s roleplay \"{roleplay.Name}\""
             );
@@ -461,7 +461,7 @@
         [Summary("Kicks the given user from the named roleplay.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(KickRoleplayMember), PermissionTarget.Self)]
-        public async Task<RuntimeResult> KickRoleplayParticipantAsync
+        public async Task<Result> KickRoleplayParticipantAsync
         (
             IGuildUser discordUser,
             [RequireEntityOwnerOrPermission(typeof(KickRoleplayMember), PermissionTarget.Other)]
@@ -471,7 +471,7 @@
             var kickUserResult = await _discordRoleplays.KickUserFromRoleplayAsync(roleplay, discordUser);
             if (!kickUserResult.IsSuccess)
             {
-                return kickUserResult.ToRuntimeResult();
+                return kickUserResult.ToResult();
             }
 
             var userDMChannel = await discordUser.GetOrCreateDMChannelAsync();
@@ -491,7 +491,7 @@
                 await userDMChannel.CloseAsync();
             }
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"{discordUser.Mention} has been kicked from {roleplay.Name}."
             );
@@ -506,7 +506,7 @@
         [Summary("Makes the roleplay with the given name current in the current channel.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> ShowOrCreateDedicatedRoleplayChannel
+        public async Task<Result> ShowOrCreateDedicatedRoleplayChannel
         (
             [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]
             Roleplay roleplay
@@ -524,7 +524,7 @@
                 var message = $"\"{roleplay.Name}\" has a dedicated channel at " +
                               $"{MentionUtils.MentionChannel(existingDedicatedChannel.Id)}";
 
-                return RuntimeCommandResult.FromSuccess(message);
+                return Result.FromSuccess(message);
             }
 
             await _feedback.SendConfirmationAsync(this.Context, "Setting up dedicated channel...");
@@ -538,14 +538,14 @@
 
             if (!result.IsSuccess)
             {
-                return result.ToRuntimeResult();
+                return result.ToResult();
             }
 
             var dedicatedChannel = result.Entity;
 
             if (!roleplay.IsActive || roleplay.ActiveChannelID == (long)dedicatedChannel.Id)
             {
-                return RuntimeCommandResult.FromSuccess
+                return Result.FromSuccess
                 (
                     $"All done! Your roleplay now has a dedicated channel at " +
                     $"{MentionUtils.MentionChannel(dedicatedChannel.Id)}."
@@ -564,7 +564,7 @@
                 return startResult;
             }
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"All done! Your roleplay now has a dedicated channel at " +
                 $"{MentionUtils.MentionChannel(dedicatedChannel.Id)}."
@@ -580,7 +580,7 @@
         [Summary("Starts the roleplay with the given name.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> StartRoleplayAsync
+        public async Task<Result> StartRoleplayAsync
         (
             [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]
             Roleplay roleplay
@@ -594,7 +594,7 @@
 
             if (!startRoleplayResult.IsSuccess)
             {
-                return startRoleplayResult.ToRuntimeResult();
+                return startRoleplayResult.ToResult();
             }
 
             var joinedUsers = roleplay.JoinedUsers.Select
@@ -612,7 +612,7 @@
             var activationMessage = $"The roleplay \"{roleplay.Name}\" is now active in " +
                                     $"{MentionUtils.MentionChannel(channel.Id)}.";
 
-            return RuntimeCommandResult.FromSuccess(activationMessage);
+            return Result.FromSuccess(activationMessage);
         }
 
         /// <summary>
@@ -624,7 +624,7 @@
         [Summary("Stops the given roleplay.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(StartStopRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> StopRoleplayAsync
+        public async Task<Result> StopRoleplayAsync
         (
             [RequireEntityOwnerOrPermission(typeof(StartStopRoleplay), PermissionTarget.Other)]
             Roleplay roleplay
@@ -633,10 +633,10 @@
             var stopRoleplayAsync = await _discordRoleplays.StopRoleplayAsync(roleplay);
             if (!stopRoleplayAsync.IsSuccess)
             {
-                return stopRoleplayAsync.ToRuntimeResult();
+                return stopRoleplayAsync.ToResult();
             }
 
-            return RuntimeCommandResult.FromSuccess($"The roleplay \"{roleplay.Name}\" has been stopped.");
+            return Result.FromSuccess($"The roleplay \"{roleplay.Name}\" has been stopped.");
         }
 
         /// <summary>
@@ -650,7 +650,7 @@
         [Summary("Includes previous messages into the roleplay, starting at the given message.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(EditRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> IncludePreviousMessagesAsync
+        public async Task<Result> IncludePreviousMessagesAsync
         (
             [RequireEntityOwnerOrPermission(typeof(EditRoleplay), PermissionTarget.Other)]
             Roleplay roleplay,
@@ -664,7 +664,7 @@
 
             if (startMessage.Channel != finalMessage.Channel)
             {
-                return RuntimeCommandResult.FromError("The messages are not in the same channel.");
+                return Result.FromError("The messages are not in the same channel.");
             }
 
             var addedOrUpdatedMessageCount = 0;
@@ -700,7 +700,7 @@
                 }
             }
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"{addedOrUpdatedMessageCount} messages added to \"{roleplay.Name}\"."
             );
@@ -716,7 +716,7 @@
         [Summary("Transfers ownership of the named roleplay to the specified user.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(TransferRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> TransferRoleplayOwnershipAsync
+        public async Task<Result> TransferRoleplayOwnershipAsync
         (
             IGuildUser newOwner,
             [RequireEntityOwnerOrPermission(typeof(TransferRoleplay), PermissionTarget.Other)]
@@ -731,10 +731,10 @@
 
             if (!transferResult.IsSuccess)
             {
-                return transferResult.ToRuntimeResult();
+                return transferResult.ToResult();
             }
 
-            return RuntimeCommandResult.FromSuccess("Roleplay ownership transferred.");
+            return Result.FromSuccess("Roleplay ownership transferred.");
         }
 
         /// <summary>
@@ -747,7 +747,7 @@
         [Summary(" Exports the named roleplay owned by the given user, sending you a file with the contents.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(ExportRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> ExportRoleplayAsync
+        public async Task<Result> ExportRoleplayAsync
         (
             [RequireEntityOwnerOrPermission(typeof(ExportRoleplay), PermissionTarget.Other)]
             Roleplay roleplay,
@@ -770,7 +770,7 @@
                 }
                 default:
                 {
-                    return RuntimeCommandResult.FromError("That export format hasn't been implemented yet.");
+                    return Result.FromError("That export format hasn't been implemented yet.");
                 }
             }
 
@@ -778,7 +778,7 @@
             using var output = await exporter.ExportAsync(roleplay);
 
             await this.Context.Channel.SendFileAsync(output.Data, $"{output.Title}.{output.Format.GetFileExtension()}");
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -792,7 +792,7 @@
         [Summary("Replays the named roleplay owned by the given user to you.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(ExportRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> ReplayRoleplayAsync
+        public async Task<Result> ReplayRoleplayAsync
         (
             [RequireEntityOwnerOrPermission(typeof(ExportRoleplay), PermissionTarget.Other)]
             Roleplay roleplay,
@@ -836,7 +836,7 @@
                 if (messages.Count <= 0)
                 {
                     await userDMChannel.SendMessageAsync("No messages found in the specified timeframe.");
-                    return RuntimeCommandResult.FromSuccess();
+                    return Result.FromSuccess();
                 }
 
                 await _feedback.SendConfirmationAsync
@@ -882,7 +882,7 @@
                 await userDMChannel.CloseAsync();
             }
 
-            return RuntimeCommandResult.FromSuccess();
+            return Result.FromSuccess();
         }
 
         /// <summary>
@@ -893,7 +893,7 @@
         [Command("view")]
         [Summary("Views the given roleplay, allowing you to read the channel.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> ViewRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> ViewRoleplayAsync(Roleplay roleplay)
         {
             var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync
             (
@@ -903,7 +903,7 @@
 
             if (!getDedicatedChannelResult.IsSuccess)
             {
-                return RuntimeCommandResult.FromError
+                return Result.FromError
                 (
                     "The given roleplay doesn't have a dedicated channel. Try using \"!rp export\" instead."
                 );
@@ -912,7 +912,7 @@
             var user = this.Context.User;
             if (!roleplay.IsPublic && roleplay.ParticipatingUsers.All(p => p.User.DiscordID != (long)user.Id))
             {
-                return RuntimeCommandResult.FromError
+                return Result.FromError
                 (
                     "You don't have permission to view that roleplay."
                 );
@@ -922,7 +922,7 @@
             await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, true);
 
             var channelMention = MentionUtils.MentionChannel(dedicatedChannel.Id);
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"The roleplay \"{roleplay.Name}\" is now visible in {channelMention}."
             );
@@ -936,7 +936,7 @@
         [Command("hide")]
         [Summary("Hides the given roleplay.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> HideRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> HideRoleplayAsync(Roleplay roleplay)
         {
             var getDedicatedChannelResult = await _dedicatedChannels.GetDedicatedChannelAsync
             (
@@ -946,7 +946,7 @@
 
             if (!getDedicatedChannelResult.IsSuccess)
             {
-                return RuntimeCommandResult.FromError
+                return Result.FromError
                 (
                     "The given roleplay doesn't have a dedicated channel."
                 );
@@ -956,7 +956,7 @@
             var dedicatedChannel = getDedicatedChannelResult.Entity;
             await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, false);
 
-            return RuntimeCommandResult.FromSuccess("Roleplay hidden.");
+            return Result.FromSuccess("Roleplay hidden.");
         }
 
         /// <summary>
@@ -966,12 +966,12 @@
         [Command("hide-all")]
         [Summary("Hides all roleplays in the server for the user.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> HideAllRoleplaysAsync()
+        public async Task<Result> HideAllRoleplaysAsync()
         {
             var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);
             if (!getRoleplays.IsSuccess)
             {
-                return getRoleplays.ToRuntimeResult();
+                return getRoleplays.ToResult();
             }
 
             var roleplays = getRoleplays.Entity.ToList();
@@ -993,7 +993,7 @@
                 await _dedicatedChannels.SetChannelVisibilityForUserAsync(dedicatedChannel, user, false);
             }
 
-            return RuntimeCommandResult.FromSuccess("Roleplays hidden.");
+            return Result.FromSuccess("Roleplays hidden.");
         }
 
         /// <summary>
@@ -1004,23 +1004,23 @@
         [Command("refresh")]
         [Summary("Manually refreshes the given roleplay, resetting its last-updated time to now.")]
         [RequireContext(ContextType.Guild)]
-        public async Task<RuntimeResult> RefreshRoleplayAsync(Roleplay roleplay)
+        public async Task<Result> RefreshRoleplayAsync(Roleplay roleplay)
         {
             var isOwner = roleplay.IsOwner(this.Context.User);
             var isParticipant = roleplay.HasJoined(this.Context.User);
 
             if (!(isOwner || isParticipant))
             {
-                return RuntimeCommandResult.FromError("You don't own that roleplay, nor are you a participant.");
+                return Result.FromError("You don't own that roleplay, nor are you a participant.");
             }
 
             var refreshResult = await _discordRoleplays.RefreshRoleplayAsync(roleplay);
             if (!refreshResult.IsSuccess)
             {
-                return refreshResult.ToRuntimeResult();
+                return refreshResult.ToResult();
             }
 
-            return RuntimeCommandResult.FromSuccess("Timeout refreshed.");
+            return Result.FromSuccess("Timeout refreshed.");
         }
 
         /// <summary>
@@ -1031,14 +1031,14 @@
         [Summary("Resets the permission set of all dedicated channels.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(EditRoleplayServerSettings), PermissionTarget.All)]
-        public async Task<RuntimeResult> ResetChannelPermissionsAsync()
+        public async Task<Result> ResetChannelPermissionsAsync()
         {
             await _feedback.SendConfirmationAsync(this.Context, "Working...");
 
             var getRoleplays = await _discordRoleplays.GetRoleplaysAsync(this.Context.Guild);
             if (!getRoleplays.IsSuccess)
             {
-                return getRoleplays.ToRuntimeResult();
+                return getRoleplays.ToResult();
             }
 
             var roleplays = getRoleplays.Entity.ToList();
@@ -1057,7 +1057,7 @@
                 }
             }
 
-            return RuntimeCommandResult.FromSuccess("Permissions reset.");
+            return Result.FromSuccess("Permissions reset.");
         }
 
         /// <summary>
@@ -1071,11 +1071,11 @@
         [Summary("Moves an ongoing roleplay outside of the bot's systems into a channel with the given name.")]
         [RequireContext(ContextType.Guild)]
         [RequirePermission(typeof(CreateRoleplay), PermissionTarget.Self)]
-        public async Task<RuntimeResult> MoveRoleplayIntoChannelAsync(string newName, params IGuildUser[] participants)
+        public async Task<Result> MoveRoleplayIntoChannelAsync(string newName, params IGuildUser[] participants)
         {
             if (!(this.Context.User is IGuildUser guildUser))
             {
-                return RuntimeCommandResult.FromError("The current user isn't a guild user.");
+                return Result.FromError("The current user isn't a guild user.");
             }
 
             var createRoleplayAsync = await _discordRoleplays.CreateRoleplayAsync
@@ -1089,7 +1089,7 @@
 
             if (!createRoleplayAsync.IsSuccess)
             {
-                return createRoleplayAsync.ToRuntimeResult();
+                return createRoleplayAsync.ToResult();
             }
 
             var roleplay = createRoleplayAsync.Entity;
@@ -1144,7 +1144,7 @@
             var getDedicatedChannel = await _dedicatedChannels.GetDedicatedChannelAsync(this.Context.Guild, roleplay);
             if (!getDedicatedChannel.IsSuccess)
             {
-                return getDedicatedChannel.ToRuntimeResult();
+                return getDedicatedChannel.ToResult();
             }
 
             var dedicatedChannel = getDedicatedChannel.Entity;
@@ -1163,7 +1163,7 @@
 
             if (!startRoleplayAsync.IsSuccess)
             {
-                return startRoleplayAsync.ToRuntimeResult();
+                return startRoleplayAsync.ToResult();
             }
 
             var joinedUsers = roleplay.JoinedUsers.Select(async p => await this.Context.Client.GetUserAsync((ulong)p.User.DiscordID));
@@ -1172,7 +1172,7 @@
             var participantList = (await Task.WhenAll(joinedMentions)).Humanize();
             await dedicatedChannel.SendMessageAsync($"Calling {participantList}!");
 
-            return RuntimeCommandResult.FromSuccess
+            return Result.FromSuccess
             (
                 $"All done! Your roleplay is now available in {MentionUtils.MentionChannel(dedicatedChannel.Id)}."
             );
